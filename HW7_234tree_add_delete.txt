#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
class node {
	//for simplicity, we again assume all numbers are distinct
public:
	int num_values;
	vector<int> value;  //it can contain 1 ... 3 values
	node * parent;
	vector<node *> child;  //child[i] ( i = 0 ... 3) is a pointer to child node i
	int child_state; //a node can have up to 4 child nodes: child 0, 1, 2, 3.  child_state i (0 ... 3) means this node is child i of its parent
	int is_leaf; //1 if this is a leaf node; otherwise 0
	node() { num_values = 0; is_leaf = 1; child.assign(4, nullptr); parent = nullptr; /*value.assign(3, -999); */}
	void add_value(int k);  //add value to a node of less than 3 value
	void remove_value(int k); //remove value from a node of more than 1 value
};
class two34_tree {
public:
	node * root;
	two34_tree() { root = nullptr; }
	void add(int k);
	node * find_add(int k); //find a node to add value k; invoked by add
	void break_3_value_node(node * p); //to be invoked by find
	void merge_with_mother(node *p);
	void child_state_adjust(node *p);
	void remove(int k);
	node * find_help(int k); //find a node to replace k once k is removed; invokde by remove
	void internal_delete(node *p, int k);//to swap the action node value and the leaf value
	int find_predecessor(node *p,int k);
	void leaf_delete(node *p, int k);
	int detection(node *p);
	void fusion_with_mother(node *p); //to be invoked by exapnd_1_value_node
	void fusion_with_child(node *p); //to be invoked by exapnd_1_value_node
	void rotation(node *p); ////to be invoked by exapnd_1_value_node
	void internal_rotation(node *p);
	void in_order_traversal(node * p);
};
void node::add_value(int k) {
	value.push_back(k);
	sort(value.begin(), value.end());
	num_values = value.size();
}
void node::remove_value(int k) {
	vector<int>::iterator it;
	it = find(value.begin(), value.end(), k);
	value.erase(it);
	num_values = value.size();
}
void two34_tree::remove(int k) {
	node *action = find_help(k);
	if (action->is_leaf == 1)leaf_delete(action, k);
	if (action->is_leaf == 0)internal_delete(action, k);

}
node *two34_tree::find_help(int k) {
	node *p = root;
	while (p!=nullptr) {
		int child = 0;
		vector<int>::iterator temp = p->value.begin();
		while (temp != p->value.end()) {
			if (k == *temp) {
				return p;
			}
			if (k < *temp) {
				p = p->child[child];
				break;
			}
			if (temp + 1 == p->value.end()) {
				p = p->child[child + 1];
				break;
			}
			child++;
			temp++;
		}
	}
	return nullptr;
}
void two34_tree::internal_delete(node *p,int k) {
	int order;
	if (k == p->value[0])order = 0;
	else if (k == p->value[1])order = 1;
	else if (k == p->value[2])order = 2;
	int temp = p->value[order];
	int delete_target=find_predecessor(p, order);
	remove(delete_target);
	node *action = find_help(k);
	if (k == action->value[0])action->value[0] = delete_target;
	else if (k == action->value[1])action->value[1] = delete_target;
	else if (k == action->value[2])action->value[2] = delete_target;

}
int two34_tree::find_predecessor(node *p,int k) {
	//k is the order of the internal num
	node *target = p->child[k];
	while (target != nullptr&&target->child[0] != nullptr) {
		target = target->child[target->num_values];
		if (target->child[0] == nullptr)break;
	}
	return target->value[target->num_values-1];
}
void two34_tree::leaf_delete(node *p, int k) {
	if(p->num_values>1){
		p->remove_value(k);
	}
	else {
		node *parent = p->parent;
		int flag;
		if (p->child_state == -1) {	
			p->remove_value(k);
			return;
		}
		flag = detection(p);//0 for rotation and 1 for fusion, 2 for go higher
		if (flag == 0) {
			rotation(p);
			p->remove_value(k);
		}
		if (flag == 1) {
			fusion_with_mother(p);
			p->remove_value(k);
		}
		if (flag == 2) {
			node *action = parent;
			while (action != nullptr) {
				if (action->parent == nullptr) {
					fusion_with_child(action);
					remove(k);
					break;
				}///////////
				flag = detection(action);
				if (flag == 0)
				{
					internal_rotation(action);
					remove(k);/////////////////////////
					break;
				}
				if (flag == 1) {
					fusion_with_mother(action);
					remove(k);
					break;
				}
				if(flag==2)action = action->parent;				
			}
		}
	}
}
int two34_tree::detection(node *p) {
	node *parent = p->parent;
	int flag = 0;//0 for rotation and 1 for fusion, 2 for go higher
	if (p->child_state == 0) {
		if (parent->child[p->child_state + 1]->num_values > 1) {
			flag = 0;
		}
		else flag = 1;
	}
	else if (p->child_state == 3) {
		if (parent->child[p->child_state - 1]->num_values > 1) {
			flag = 0;
		}
		else flag = 1;
	}
	else {
		if (parent->child[p->child_state + 1]!=nullptr&&parent->child[p->child_state + 1]->num_values > 1) {
			flag = 0;
		}
		else if (parent->child[p->child_state - 1]!=nullptr&&parent->child[p->child_state - 1]->num_values > 1) {
			flag = 0;
		}
		else flag = 1;
	}
	if (flag == 1 && parent->num_values == 1)flag = 2;
	return flag;
}
void two34_tree::fusion_with_mother(node *p) {
	node *parent = p->parent;
	if (p->child_state == 0) {
		node *sibling= parent->child[1];
		p->add_value(parent->value[0]);
		p->add_value(sibling->value[0]);
		p->child[2] = sibling->child[0];
		p->child[3] = sibling->child[1];
		child_state_adjust(p);
		if (sibling->child[0] != nullptr) {
			sibling->child[0]->parent = p;
			sibling->child[1]->parent = p;
		}
		parent->child.erase(parent->child.begin() +1);
		parent->child.resize(4);
		parent->remove_value(parent->value[0]);
		child_state_adjust(parent);
		delete sibling;
	}
	else {
		int child_state = p->child_state;
		node *sibling = parent->child[child_state-1];
		p->add_value(parent->value[child_state - 1]);
		p->add_value(sibling->value[0]);
		p->child[2] = p->child[0];
		p->child[3] = p->child[1];
		p->child[1] = sibling->child[1];
		p->child[0] = sibling->child[0];
		child_state_adjust(p);
		if (sibling->child[0] != nullptr) {
			sibling->child[0]->parent = p;
			sibling->child[1]->parent = p;
		}
		
		parent->child.erase(parent->child.begin()+p->child_state-1 );		
		parent->child.resize(4);
		parent->remove_value(parent->value[child_state - 1]);
		child_state_adjust(parent);
		delete sibling;
	}
}
void two34_tree::fusion_with_child(node *p) {
	node *left = p->child[0];
	node *right = p->child[1];
	p->add_value(left->value[0]);
	p->add_value(right->value[0]);
	p->child[0] = left->child[0];
	p->child[1] = left->child[1];
	p->child[2] = right->child[0];
	p->child[3] = right->child[1];
	if (p->child[0] != nullptr) {
		p->child[0]->parent = p;
		p->child[1]->parent = p;
		p->child[2]->parent = p;
		p->child[3]->parent = p;
		delete left;
		delete right;
	}
	child_state_adjust(p);/////////////////////
	if (p->child[0] == nullptr)p->is_leaf = 1;
}
void two34_tree::rotation(node *p) {
	node *parent = p->parent;
	int num = p->child_state;
	if (num == 0||parent->child[num-1]->num_values == 1) {//steal from right
		int temp_value = parent->child[num + 1]->value[0];// the smallest value of right sibling
		remove(temp_value);////recursive
		p->add_value(parent->value[num]);
		parent->remove_value(parent->value[num]);
		parent->add_value(temp_value);
	}
	else {//steal from left
		int temp_value = parent->child[num - 1]->value[parent->child[num - 1]->num_values-1];//the biggest value of left sibling
		remove(temp_value);////recursive
		p->add_value(parent->value[num-1]);
		parent->remove_value(parent->value[num-1]);
		parent->add_value(temp_value);
	}
}
void two34_tree::internal_rotation(node *p) {
	node *parent = p->parent;
	int num = p->child_state;
	node * sibling;
	if (num == 0 || parent->child[num - 1]->num_values == 1) {//steal from right
		sibling = parent->child[num + 1];
		int temp_value = sibling->value[0];// the smallest value of right sibling
		sibling->remove_value(temp_value);////recursive
		p->add_value(parent->value[num]);
		p->child.insert(p->child.end()-2, sibling->child.front());
		p->child.resize(4);
		sibling->child.front()->parent = p;
		parent->remove_value(parent->value[num]);
		parent->add_value(temp_value);
		child_state_adjust(p);
		sibling->child.erase(sibling->child.begin());
		sibling->child.resize(4);
		child_state_adjust(sibling);
	}
	else {//steal from left
		sibling = parent->child[num - 1];
		int temp_value = sibling->value[sibling->num_values - 1];//the biggest value of left sibling
		sibling->remove_value(temp_value);////recursive
		p->add_value(parent->value[num - 1]);
		node *left = sibling->child[sibling->num_values+1];
		p->child.insert(p->child.begin(), left);
		p->child.resize(4);
		left->parent = p;
		parent->remove_value(parent->value[num - 1]);
		parent->add_value(temp_value);
		child_state_adjust(p);
		sibling->child[sibling->num_values + 1] =nullptr;
		child_state_adjust(sibling);
	}
}
void two34_tree::add(int k) {
	if (root == nullptr) {
		root = new node();
		root->add_value(k);
		root->child_state = -1;
	}
	else {
		node *action = this->find_add(k);
		action->add_value(k);
	}
}
node *two34_tree::find_add(int k) {
	node *p = root;
	while (p->is_leaf == 0) {
		int child = 0;
		vector<int>::iterator temp = p->value.begin();
		while (temp != p->value.end()) {
			if (k < *temp) {
				p = p->child[child];
				break;
			}
			if (temp + 1 == p->value.end()) {
				p = p->child[child + 1];
				break;
			}
			child++;
			temp++;
		}

	}
	if (p->num_values < 3)return p;
	else {
		int temp = p->value[1];
		break_3_value_node(p);
		if (k <temp)return p->child[0];
		else return p->child[1];
	}
}
void two34_tree::break_3_value_node(node *p) {
	node *left = new node();
	node *right = new node();
	left->add_value(p->value.front());
	right->add_value(p->value.back());
	if (p->child[0] != nullptr) {
		left->child[0] = p->child[0];
		p->child[0]->parent = left;
		left->child[1] = p->child[1];
		p->child[1]->parent = left;
		right->child[0] = p->child[2];
		p->child[2]->parent = right;
		right->child[1] = p->child[3];
		p->child[3]->parent = right;
		left->is_leaf = 0;
		right->is_leaf = 0;
		child_state_adjust(left);
		child_state_adjust(right);
	}
	left->parent = p;
	right->parent = p;

	left->child_state = 0;//////
	right->child_state = 1;
	p->child.assign(4, nullptr);
	p->child[0] = left;
	p->child[1] = right;
	//child_state_adjust(p);
	p->is_leaf = 0;
	p->remove_value(p->value.back());
	p->remove_value(p->value.front());
	merge_with_mother(p);
	////////////

}
void two34_tree::child_state_adjust(node *p) {
	int num = p->num_values + 1;
	int start = 0;
	if (p->child[0] == nullptr)return;
	while (num--) {
		p->child[start]->child_state = start;
		start++;
	}
}
void two34_tree::merge_with_mother(node *p) {
	node *parent = p->parent;
	if (parent == nullptr) {
		return;
	}
	if (parent->num_values == 3) {
		break_3_value_node(parent);
	}
	parent = p->parent;

	if (p->value[0] < parent->value[0]) {
		parent->child.erase(parent->child.begin());
		parent->child.insert(parent->child.begin(),p->child.begin(), p->child.begin() + 2);
		parent->child.resize(4);
	}
	else if (parent->num_values ==1 || p->value[0] < parent->value[1]) {
		parent->child.erase(parent->child.begin()+1);
		parent->child.insert(parent->child.begin()+1, p->child.begin(), p->child.begin() + 2);
		parent->child.resize(4);
	}
	else if (parent->num_values == 2 || p->value[0] < parent->value[2]) {
		parent->child.erase(parent->child.begin()+2);
		parent->child.insert(parent->child.begin()+2, p->child.begin(), p->child.begin() + 2);
		parent->child.resize(4);
	}
	else {
		parent->child.erase(parent->child.begin() + 3);
		parent->child.insert(parent->child.begin() + 3, p->child.begin(), p->child.begin() + 2);
		parent->child.resize(4);
	}
	parent->add_value(p->value[0]);
	int num = parent->num_values;
	child_state_adjust(parent);
	p->child[0]->parent = parent;
	p->child[1]->parent = parent;
}
void two34_tree::in_order_traversal(node * p) {
	cout << endl;
	node * p1 = p;
	if (p1 == nullptr) return;
	int i;
	for (i = 0; i < p1->num_values; i++) {
		in_order_traversal(p1->child[i]);
		cout << "  " << p1->value[i] << "  " << "child_state = " << p1->child_state;
	}
	in_order_traversal(p1->child[i]);
}
int main() {

	//two34_tree tree;
	//for (int i = 0; i < 100; i++)
	//{
	//	tree.add(i);
	//}	
	//tree.in_order_traversal(tree.root);
	//for (int i = 0; i < 100; i++)
	//{
	//	tree.remove(99-i);
	//	tree.in_order_traversal(tree.root);

	//}
	two34_tree t1;
	t1.add(40);
	t1.add(30);
	t1.add(20);
	t1.in_order_traversal(t1.root);
	t1.add(100);
	t1.add(120);
	t1.in_order_traversal(t1.root);
	t1.add(200);
	t1.in_order_traversal(t1.root);
	t1.add(400);
	t1.in_order_traversal(t1.root);
	t1.add(600);
	t1.in_order_traversal(t1.root);
	t1.add(800);
	t1.in_order_traversal(t1.root);
	t1.remove(20);
	t1.in_order_traversal(t1.root);
	t1.remove(200);
	t1.in_order_traversal(t1.root);
	t1.remove(100);
	t1.in_order_traversal(t1.root);
	getchar();
	getchar();
	return 0;



	getchar();
}