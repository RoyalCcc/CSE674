//HW2: Sparse Matrix Operation -- Applicaiton of 2-D linked lists  
//by C-Y (Roger) Chen
//Due:  11:59pm, Wed. September 27
//Implement the following three member functions for the class my_matrix:
//add_node, operator+, operator*
//Do not change the main function and the my_matrix::print function

#include <iostream>
#include <vector>
using namespace std;

class node {
public:
	int value;
	int r_position;
	int c_position;
	node * r_next;
	node * c_next;
	node() { value = -9999; r_position = c_position = -1; r_next = c_next = nullptr; }
	node(int v, int r, int c) { value = v; r_position = r; c_position = c; r_next = c_next = nullptr; }

};
class my_matrix {
public:
	int num_rows;
	int num_cols;
	vector<node *> r_vec;
	vector<node *> c_vec;


	my_matrix() {}
	my_matrix(int r, int c);
	//Initialize a matrix of rows and c cols.

	my_matrix(int r, int c, int n, int k);
	//Initializa a matrix of r rows, c cols, n nodes, with values randomly in - (k-1) ... (k-1);
	void print(); //print value, r_position, and c_position of all matrix elements in row-oriented manner


				  //Implement the following three member functions:

	void add_node(int v, int r, int c);
	//Create a new node with value v at row r and col c.
	//If there already exists an element at this position, then just update the node
	//value at this position to v, and do not create a new node.

	my_matrix operator+(my_matrix M);//matrix addition

	my_matrix operator*(my_matrix M); //matrix multiplication


};
void my_matrix::add_node(int v, int r, int c) {
	node *pr = r_vec[r];
	node *pc = c_vec[c];
	node *p1 = new node(v, r, c);
	int r_flag=0, c_flag=0;
	if (v == 0) {
		for (pr = r_vec[r]; pr != nullptr; pr = pr->r_next) {
			if (pr->c_position == c) {
				if (r_vec[r]->c_position == c) {
					r_vec[r] = r_vec[r]->r_next;
					r_flag = 1;
				}
				else {
					for (pr = r_vec[r]; pr->r_next->c_position < c; pr = pr->r_next);
					pr->r_next = pr->r_next->r_next;
					r_flag = 1;
				}
			}
		}
		for (pc = c_vec[c]; pc != nullptr; pc = pc->c_next) {
			if (pc->r_position == r)
			{
				if (c_vec[c]->r_position == r) {
					c_vec[c] = c_vec[c]->c_next;
					c_flag = 1;
				}
				else {
					for (pc = c_vec[c]; pc->c_next->r_position < r; pc = pc->c_next);
					pc->c_next = pc->c_next->c_next;
					c_flag = 1;
				}

			}
		}						
			if (c_flag == 0 && r_flag == 0 ) {
				c_flag = 1, r_flag = 1;
			}
		

	}
	else {

		if (r_vec[r] == nullptr&&r_flag==0) {
			r_vec[r] = p1;
			r_flag = 1;
		}
		if (c_vec[c] == nullptr&&c_flag==0) {
			c_vec[c] = p1;
			c_flag = 1;
		}
		if (r_flag == 0) {
			if (c<r_vec[r]->c_position) {
				p1->r_next = r_vec[r];
				r_vec[r] = p1;
				r_flag = 1;
			}
			if (r_flag == 0) {
				for (pr= r_vec[r]; pr != nullptr; pr = pr->r_next) {
					if (c<pr->c_position ) {
						for (pr = r_vec[r]; pr->r_next->c_position < c; pr = pr->r_next);
						p1->r_next = pr->r_next;
						pr->r_next = p1;
						break;
					}
					if (pr->c_position  == c) {
						pr->value= v;
						break;
					}
					else if(pr->r_next ==nullptr)
					{
						pr->r_next = p1;
						break;
					}
				}

			}			
		}
		if (c_flag == 0) {
			if (c_vec[c]->r_position>r) {
				p1->c_next = c_vec[c];
				c_vec[c] = p1;
				c_flag = 1;
			}
			if (c_flag == 0) {
				for (pc=c_vec[c]; pc != nullptr; pc = pc->c_next) {
					if (pc->r_position > r) {
						for (pc = c_vec[c]; pc->c_next->r_position < r; pc = pc->c_next);
						p1->c_next = pc->c_next;
						pc->c_next = p1;
						break;
					}
					if (pc->r_position  == r) {
						pc->value = v;
						break;
					}
					else if(pc->c_next == nullptr)
					{
						pc->c_next = p1;
						break;
					}
				}
			}
			}
			
	}


	r_flag = 0, c_flag = 0;
}
my_matrix my_matrix::operator+(my_matrix M) {
	my_matrix temp(num_rows, num_cols);
	if (num_rows != M.num_rows || num_cols != M.num_cols) {
		for (int i = 0; i < num_rows; i++)
		{
			for (int j = 0; j < num_cols; j++) {
				temp.add_node(-9999, i, j);
			}
		}
		cout << "The input scale goes wrong!";
		return temp;
	}
	for (int i = 0; i < num_rows; i++) {
		node *pr1 = r_vec[i];
		node *pr2 = M.r_vec[i];
		for (pr1 = r_vec[i], pr2 = M.r_vec[i]; pr1 != nullptr||pr2!=nullptr; )
		{
			if (pr1 == nullptr) {
				temp.add_node(pr2->value, pr2->r_position, pr2->c_position);
				pr2 = pr2->r_next;
				continue;
			}
			if (pr2 == nullptr) {
				temp.add_node(pr1->value, pr1->r_position, pr1->c_position);
				pr1 = pr1->r_next;
				continue;
			}
			if (pr1->c_position == pr2->c_position) {
				temp.add_node(pr1->value + pr2->value, pr1->r_position, pr1->c_position);
				pr1 = pr1->r_next, pr2 = pr2->r_next;
				continue;
			}
			if(pr1->c_position > pr2->c_position){
				temp.add_node(pr2->value, pr2->r_position, pr2->c_position);
				pr2 = pr2->r_next;
				continue;
			}
			if (pr1->c_position < pr2->c_position) {
				temp.add_node(pr1->value, pr1->r_position, pr1->c_position);
				pr1 = pr1->r_next;
				continue;
			}
		}
	}
	return temp;
}
	//matrix addition
my_matrix my_matrix::operator*(my_matrix M) {
	my_matrix temp(7,6);
	
	for (int i = 0; i < num_rows; i++) {
		node *p1 = r_vec[i];
		for (int j = 0; j < M.num_cols; j++) {
			node *p2 = M.c_vec[j];
			int temp1 = 0;
			for (p1 = r_vec[i], p2 = M.c_vec[j]; p1 != nullptr&&p2 != nullptr;)
			{
				if (p1->c_position < p2->r_position) {
					p1 = p1->r_next;
					continue;
				}
				if (p1->c_position > p2->r_position) {
					p2 = p2->c_next;
					continue;
				}
				if (p1->c_position == p2->r_position) {
					temp1 = temp1 + (p1->value) *(p2->value);
					p1 = p1->r_next, p2 = p2->c_next;
					continue;
				}
			}
			temp.add_node(temp1,i,j);
		}
	}
	return temp;
}
//matrix multiplication
//Create a new node with value v at row r and col c.
//If there already exists an element at this position, then just update the node
//value at this position to v, and do not create a new node.
//my_matrix my_matrix::operator+(my_matrix M) {
//
//}
////matrix addition
//my_matrix my_matrix::operator*(my_matrix M) {
//
//}
//matrix multiplication
my_matrix::my_matrix(int r, int c) {
	num_rows = r;
	num_cols = c;
	r_vec.resize(r, nullptr);
	c_vec.resize(c, nullptr);
}


my_matrix::my_matrix(int r, int c, int n, int k) {
	num_rows = r;
	num_cols = c;
	r_vec.resize(r, nullptr);
	c_vec.resize(c, nullptr);
	for (int i = 0; i < n; i++) {
		int vv = rand() % (2 * k - 1) - (k - 1);
		int rr = rand() % r;
		int cc = rand() % c;
		add_node(vv, rr, cc);
	}
}



void my_matrix::print() {
	cout << endl;
	for (int i = 0; i < num_rows; i++) {
		node * p = r_vec[i];
		cout << endl;
		while (p != nullptr) {
			cout << p->value << " " << p->r_position << " " << p->c_position << "  ";
			p = p->r_next;
		}
	}
}



int main() {
	my_matrix M1(7, 5, 11, 8), M2(7, 5, 10, 8), M3(7, 5), M4(5, 6, 13, 9), M5(7, 6);
	M1.print();
	M2.print();
	M3 = M1 + M2;
	M3.print();
	M1.print();
	M4.print();
	M5 = M1 * M4;
	M5.print();
	getchar();
	getchar();
	return 0;
}